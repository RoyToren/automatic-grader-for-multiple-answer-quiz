{"version":3,"sources":["drop.js","App.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","props","isDragAccept","isDragReject","isDragActive","getColor","StyledDropzone","onDrop","useCallback","acceptedFiles","formData","FormData","append","name","fetch","headers","method","body","then","res","json","data","alert","useDropzone","accept","getRootProps","getInputProps","className","App","useState","currentTime","setCurrentTime","currImage","useEffect","time","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAiBMA,EAAYC,IAAOC,IAAV,sUAQG,SAAAC,GAAK,OArBN,SAACA,GAChB,OAAIA,EAAMC,aACC,UAEPD,EAAME,aACC,UAEPF,EAAMG,aACC,UAEJ,UAWkBC,CAASJ,MASrB,SAASK,EAAeL,GACnC,IAAMM,EAASC,uBAAY,SAAAC,GACvB,IAAIC,EAAW,IAAIC,SACnBD,EAASE,OAAO,OAAQ,QACxBF,EAASE,OAAO,WAAY,WAC5BF,EAASE,OAAO,QAAQH,EAAc,GAAGA,EAAc,GAAGI,MAQ1DC,MAAM,gBAPU,CACdC,QAAS,CACP,OAAU,oBAEZC,OAAQ,OACRC,KAAMP,IAEwBQ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GAC3DC,MAAM,YAGP,IAjBqC,EA2BxCC,YAAY,CAACC,OAAQ,UAAUjB,WALjCkB,EAtB0C,EAsB1CA,aACAC,EAvB0C,EAuB1CA,cACAtB,EAxB0C,EAwB1CA,aACAF,EAzB0C,EAyB1CA,aACAC,EA1B0C,EA0B1CA,aAGF,OACE,qBAAKwB,UAAU,YAAf,SACE,eAAC7B,EAAD,2BAAe2B,EAAa,CAACrB,eAAcF,eAAcC,kBAAzD,cACE,qCAAWuB,MACX,wFACA,uF,MClCOE,MA9Bf,WAAgB,IAAD,EACyBC,mBAAS,GADlC,mBACNC,EADM,KACOC,EADP,OAEwBF,mBAAS,SAFjC,mBAENG,EAFM,KAUb,OAVa,KAIbC,qBAAU,WACRnB,MAAM,aAAaI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GAC9CU,EAAeV,EAAKa,WAErB,IAGD,sBAAKP,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACA,oFAEA,sBAAKA,UAAU,WAAf,UACE,qDAAwBG,EAAxB,OACA,6DAAgCE,EAAhC,OACA,cAAC1B,EAAD,IAEA,kFACA,gFAEF,wBAAQqB,UAAU,aAAlB,kCCfSQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d53cef89.chunk.js","sourcesContent":["import React, {useCallback } from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\nimport styled from 'styled-components';\r\n\r\nconst getColor = (props) => {\r\n  if (props.isDragAccept) {\r\n      return '#00e676';\r\n  }\r\n  if (props.isDragReject) {\r\n      return '#ff1744';\r\n  }\r\n  if (props.isDragActive) {\r\n      return '#2196f3';\r\n  }\r\n  return '#eeeeee';\r\n}\r\n\r\nconst Container = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n  border-width: 2px;\r\n  border-radius: 2px;\r\n  border-color: ${props => getColor(props)};\r\n  border-style: dashed;\r\n  background-color: #fafafa;\r\n  color: #bdbdbd;\r\n  outline: none;\r\n  transition: border .24s ease-in-out;\r\n`;  \r\n\r\n\r\nexport default function StyledDropzone(props) {\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        let formData = new FormData();\r\n        formData.append('name', 'John');\r\n        formData.append('password', 'John123');\r\n        formData.append('tests',acceptedFiles[0],acceptedFiles[0].name)\r\n        const options = {\r\n          headers: {\r\n            'Accept': 'application/json',\r\n          },\r\n          method: 'POST',\r\n          body: formData,\r\n        };\r\n        fetch('/api/getimage', options).then(res => res.json()).then(data => {\r\n          alert('yay');\r\n        //   setCurrentImage(data.image);\r\n        });\r\n      }, []);\r\n    \r\n    //   const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject\r\n  } = useDropzone({accept: 'image/*',onDrop});\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      <Container {...getRootProps({isDragActive, isDragAccept, isDragReject})}>\r\n        <input {...getInputProps()} />\r\n        <p>Drag 'n' drop some files here, or click to select files</p>\r\n        <em>(Only *.jpeg and *.png images will be accepted)</em>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect,useCallback } from 'react';\nimport StyledDropzone from './drop'\nimport './App.css';\n\nfunction App() {\n  const [currentTime, setCurrentTime] = useState(0);\n  const [currImage, setCurrentImage] = useState('false');\n\n  useEffect(() => {\n    fetch('/api/time').then(res => res.json()).then(data => {\n      setCurrentTime(data.time);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <h1>Welcome to the automatic multiple choice checker</h1>\n      </header>\n      <div className=\"App-body\">\n        <p>The current time is {currentTime}.</p>\n        <p>The current image status is {currImage}.</p>\n        <StyledDropzone />\n\n        <p>please enter the number of questions in the test:</p>\n        <p>for each question, enter the solution number</p>\n    </div>\n      <footer className=\"App-footer\">\n        By Roy and Batel\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}